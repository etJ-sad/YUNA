function Show-VersionTab()
{
    $versionTab.Header = "Windows Image Version"

    $versionTable.Columns.Add("About")
    $versionTable.Columns.Add("Value")
	$versionTable.Columns.Add("Status")
	
    $versionTabGrid.FontSize = 12
	
	# deviceModelName
    . ".\core\version_moduls\deviceModelName.ps1"

    # baseOperatingSystem
	. ".\core\version_moduls\baseOperatingSystem.ps1"
    
	# baseOperatingSystemVersion
	. ".\core\version_moduls\baseOperatingSystemVersion.ps1"

	# baseOperatingSystemBuild
	. ".\core\version_moduls\baseOperatingSystemBuild.ps1"

	# version
	. ".\core\version_moduls\version.ps1"	
	
	# languages
	. ".\core\version_moduls\languages.ps1"
	
	# languagesLXP
	. ".\core\version_moduls\languagesLXP.ps1"

	# A5EPartNumber
	. ".\core\version_moduls\A5EPartNumber.ps1"
	
	# usedDriverBaseline
	. ".\core\version_moduls\usedDriverBaseline.ps1"

	# imageBuild
	. ".\core\version_moduls\imageBuild.ps1"
	
	# oemManufacturer
	. ".\core\version_moduls\oemManufacturer.ps1"
	
	# oemPhone
	. ".\core\version_moduls\oemPhone.ps1"
	
	# oemHours
	. ".\core\version_moduls\oemHours.ps1"
	
	# oemWebsite
	. ".\core\version_moduls\oemWebsite.ps1"
	
	# systemProtectionStatus
	. ".\core\version_moduls\systemProtectionStatus.ps1"
	
	# UAC
    . ".\core\version_moduls\UAC.ps1"
	
	# defaultAppAssociations
	. ".\core\version_moduls\defaultAppAssociations.ps1"
	
	# backgroundWallpaper
	. ".\core\version_moduls\backgroundWallpaper.ps1"
	
	# lockLoginWallpaper
	. ".\core\version_moduls\lockLoginWallpaper.ps1"
	
	# windowsKey
	. ".\core\version_moduls\windowsKey.ps1"
	
	# windowsLicenseStatus
	. ".\core\version_moduls\windowsLicenseStatus.ps1"
	
	# microsoftEdgeBookmarks
	. ".\core\version_moduls\microsoftEdgeBookmarks.ps1"
	
	# microsoftEdgeInitialPreferences
	. ".\core\version_moduls\microsoftEdgeInitialPreferences.ps1"
	
	# microsoftEdgeVersion
	. ".\core\version_moduls\microsoftEdgeVersion.ps1"
		
	# defenderEngineVersion
	. ".\core\version_moduls\defenderEngineVersion.ps1"
	
    # defenderSignatureVersion
	. ".\core\version_moduls\defenderSignatureVersion.ps1"
		
	# installedUpdates
	. ".\core\version_moduls\installedUpdates.ps1"
		
<#
	$versionTabGrid.add_LoadingRow({
        param($sender, $e)
        $row = $e.Row
        $status = $row.DataContext.Status
        if ($status -eq "fail") {
            $row.Background = "Red"
        } elseif ($status -eq "pass") {
            $row.Background = "Green"
        }
    })
#>

    $versionTabGrid.ItemsSource = $versionTable.DefaultView
	$versionTabGrid.add_AutoGeneratedColumns({
		param($sender, $e)
		if ($sender.Columns.Count -ge 3) {
				$sender.Columns[0].Width = 75
				$sender.Columns[1].Width = 200
				$sender.Columns[2].Width = 600
		}
	})
	
	$versionStatusColumn = New-Object Windows.Controls.DataGridTemplateColumn
	$versionStatusColumn.Header = "Status"
	$versionStatusColumn.CellTemplate = [Windows.Markup.XamlReader]::Parse($cellTemplate)
	$versionTabGrid.Columns.Add($versionStatusColumn)
	
    $versionTab.Content = $versionTabGrid
    $tabControl.Items.Add($versionTab)
}

function Export-VersionToJson {
    param(
        [bool]$fullReport = $false
    )

    $versionJson = @()
    
    $versionTable.Rows | ForEach-Object {
        $versionInfo = [PSCustomObject]@{
            "Setting" = $_["About"]
            "Value"   = $_["Value"] -replace "`n", ""
            "Status"  = $_["Status"]
        }
        $versionJson += $versionInfo
    }

    $jsonOutput = $versionJson | ConvertTo-Json -Depth 2
    $jsonOutput | Out-File -Encoding UTF8 -FilePath ".\output\_version.json"
}
