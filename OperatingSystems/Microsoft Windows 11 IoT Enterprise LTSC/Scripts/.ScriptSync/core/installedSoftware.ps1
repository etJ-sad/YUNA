function Show-InstalledSoftwareTab() {
    $installedSoftwareTabItem.Header = "Installed Software"

    $installedSoftwareDataGrid.VerticalAlignment = "Top"
    $installedSoftwareDataGrid.Margin = "1,0,1,1"

    $installedSoftwareDataTable.Columns.Add("Name")
    $installedSoftwareDataTable.Columns.Add("Publisher")
    $installedSoftwareDataTable.Columns.Add("Version")

    $installedPrograms = Get-InstalledPrograms

	# Create a hash set to store unique program names
	$addedNames = @{}

	# Add Registry Programs
	foreach ($program in $installedPrograms.RegistryPrograms) {
		if (-not $addedNames.ContainsKey($program.DisplayName)) {
			$row = $installedSoftwareDataTable.NewRow()
			$row["Name"] = $program.DisplayName
			$row["Publisher"] = $program.Publisher
			$row["Version"] = $program.DisplayVersion
			$installedSoftwareDataTable.Rows.Add($row)
			# Add the name to the hash set
			$addedNames[$program.DisplayName] = $true
		}
	}

	# Add Package Programs (Get-AppxPackage), excluding Microsoft apps
	foreach ($program in $installedPrograms.PackagePrograms) {
		# Filter out any apps from Microsoft
		if ($program.Publisher -notlike "*Microsoft*" -and -not $addedNames.ContainsKey($program.Name)) {
			$row = $installedSoftwareDataTable.NewRow()
			# Get-AppxPackage has different properties, adjust accordingly
			$row["Name"] = $program.Name
			$row["Publisher"] = $program.Publisher
			$row["Version"] = $program.Version
			$installedSoftwareDataTable.Rows.Add($row)
			# Add the name to the hash set
			$addedNames[$program.Name] = $true
		}
	}

	# Add WMI Packages
	foreach ($program in $installedPrograms.WmiPackages) {
		if (-not $addedNames.ContainsKey($program.Name)) {
			$row = $installedSoftwareDataTable.NewRow()
			$row["Name"] = $program.Name
			$row["Publisher"] = $program.Publisher
			$row["Version"] = $program.Version
			$installedSoftwareDataTable.Rows.Add($row)
			# Add the name to the hash set
			$addedNames[$program.Name] = $true
		}
	}

    # Append Content
    $installedSoftwareDataGrid.ItemsSource = $installedSoftwareDataTable.DefaultView
    $installedSoftwareDataGrid.add_AutoGeneratedColumns({
        param($sender, $e)
        if ($sender.Columns.Count -ge 3) {
            $sender.Columns[0].Width = 450
            $sender.Columns[1].Width = 275
            $sender.Columns[2].Width = 125
        }
    })
    $installedSoftwareTabItem.Content = $installedSoftwareDataGrid
    $tabControl.Items.Add($installedSoftwareTabItem)
}

# List of installed programs
function Get-InstalledPrograms {
    # Programs from the Registry
    $programs = Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* |
                Where-Object { $_.DisplayName -ne $null -and $_.Publisher -notlike "Microsoft*" } |
                Select-Object DisplayName, Publisher, DisplayVersion |
                Sort-Object DisplayName

    # Package programs from AppX packages (for all users)
    $packagePrograms = Get-AppxPackage -AllUsers | Select-Object Name, Publisher, Version

    # WMI programs from Win32_Product
    $packageWmi = Get-WmiObject -Class Win32_Product | Select-Object @{
        Name = "Name"; 
        Expression = { $_.Name }
    }, @{
        Name = "Version"; 
        Expression = { $_.Version }
    }, @{
        Name = "Publisher"; 
        Expression = { $_.Vendor }
    }, @{
        Name = "Status"; 
        Expression = { "Installed" }
    }

    # Combine all results into a single object for convenience
    $allPrograms = @{
        "RegistryPrograms" = $programs
        "PackagePrograms" = $packagePrograms
        "WmiPackages" = $packageWmi
    }
    
    return $allPrograms
}


function Export-InstalledSoftwareToJson {
    param(
        [bool]$fullReport = $false
    )

    $installedSoftwareJsonObject = [ordered]@{}
    
    for ($i = 0; $i -lt $installedSoftwareDataTable.Rows.Count; $i++) {
        $softwareRow = $installedSoftwareDataTable.Rows[$i]
        $softwareProperties = @{
            "Name"      = $softwareRow["Name"]
            "Publisher" = $softwareRow["Publisher"]
            "Version"   = $softwareRow["Version"]
        }
        $installedSoftwareJsonObject["Software$i"] = $softwareProperties
    }
	
	$jsonOutput = $installedSoftwareJsonObject | ConvertTo-Json -Depth 2
    $jsonOutput | Out-File -Encoding UTF8 .\output\_installedSoftware.json
}
